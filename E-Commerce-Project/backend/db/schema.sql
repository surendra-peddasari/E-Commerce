-- SQL Schema extracted from project report
DROP DATABASE IF EXISTS ecommerce;
CREATE DATABASE ecommerce;
USE ecommerce;
);
select * from users;
);
);
DESCRIBE products;
ALTER TABLE products ADD COLUMN image VARCHAR(255);
);
);
);
ALTER TABLE products ADD COLUMN category_id INT;
ALTER TABLE products ADD CONSTRAINT fk_category FOREIGN KEY (category_id) REFERENCES categories(id);
SELECT id, name, price, category, image FROM products;
UPDATE products SET image = 'iphone13.jpg' WHERE name = 'iPhone 13';
UPDATE products SET image = 'samsung_s22.jpg' WHERE name = 'Samsung Galaxy S22';
UPDATE products SET image = 'sony_headphones.jpg' WHERE name = 'Sony Headphones';
UPDATE products SET image = 'nike_shoes.jpg' WHERE name = 'Nike Running Shoes';
SET SQL_SAFE_UPDATES = 0;
UPDATE products SET image = 'iphone13.jpg' WHERE id = 1;
UPDATE products SET image = 'samsung_s22.jpg' WHERE id = 2;
UPDATE products SET image = 'sony_headphones.jpg' WHERE id = 3;
UPDATE products SET image = 'nike_shoes.jpg' WHERE id = 4;
UPDATE products SET image = 'iphone13.jpg' WHERE id = 11;
UPDATE products SET image = 'samsung_s22.jpg' WHERE id = 7;
UPDATE products SET image = 'sony_headphones.jpg' WHERE id = 8;
UPDATE products SET image = 'nike_shoes.jpg' WHERE id = 9;
SET SQL_SAFE_UPDATES = 1;
SELECT id, name, image FROM products; select * from products; select * from categories;
('Nike Running Shoes', 'Fashion', 89.99, 'nike_shoes.jpg');
String email = request.getParameter("email");         String password = request.getParameter("password");         if (email == null || email.isEmpty() || password == null || password.isEmpty()) {             response.sendRedirect("register.jsp?error=All fields are required");
return;
String checkEmailQuery = "SELECT COUNT(*) FROM users WHERE email = ?";             try (PreparedStatement checkStmt = conn.prepareStatement(checkEmailQuery)) {                 checkStmt.setString(1, email);                 try (ResultSet rs = checkStmt.executeQuery()) {                     if (rs.next() && rs.getInt(1) > 0) {                         response.sendRedirect("register.jsp?error=Email already exists");
return;
stmt.setString(2, email);
stmt.setString(3, password);  // Consider hashing the password                 int rowsAffected = stmt.executeUpdate();                 if (rowsAffected > 0) {                     response.sendRedirect("register-success.jsp");
} else {                     response.sendRedirect("register.jsp?error=Registration failed. Try again.");
e.printStackTrace();             response.sendRedirect("register.jsp?error=Database error occurred.");
9.7 LoginServlet.java package com.ecommerce.servlet; import com.ecommerce.dao.DBConnection; import java.io.*; import java.sql.*; import javax.servlet.*; import javax.servlet.annotation.WebServlet; import javax.servlet.http.*;
String query = "SELECT id, password FROM users WHERE email = ?";             try (PreparedStatement stmt = conn.prepareStatement(query)) {                 stmt.setString(1, email);
response.sendRedirect("login.jsp?error=Invalid Credentials");
} else {                     response.sendRedirect("login.jsp?error=Invalid Credentials");
e.printStackTrace();             response.sendRedirect("login.jsp?error=Database Error");
package com.ecommerce.servlet; import com.ecommerce.dao.UserDAO; import com.ecommerce.model.User; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.io.IOException;
String email = request.getParameter("email");         if (email == null || email.trim().isEmpty()) {             response.sendRedirect("forgot.jsp?error=Please enter your email.");
return;
UserDAO userDAO = new UserDAO();
User user = userDAO.getUserByEmail(email);
if (user == null) {             response.sendRedirect("forgot.jsp?error=No account found with this email.");
return;
// Here, you should implement email sending functionality         // For now, we just redirect with a success message         response.sendRedirect("forgot.jsp?success=Check your email for reset instructions.");
package com.ecommerce.servlet; import com.ecommerce.dao.DBConnection; import java.io.*; import java.sql.*; import javax.servlet.*; import javax.servlet.http.*;
int productId = Integer.parseInt(request.getParameter("id"));             try (Connection conn = DBConnection.getConnection()) {                 String query = "DELETE FROM products WHERE id=?";                 try (PreparedStatement stmt = conn.prepareStatement(query)) {                     stmt.setInt(1, productId);                     stmt.executeUpdate();
response.sendRedirect("admin.jsp");
e.printStackTrace();
ProductDAO productDAO = new ProductDAO();
import java.io.*; import javax.servlet.ServletException; import javax.servlet.annotation.MultipartConfig; import javax.servlet.http.*; import com.ecommerce.dao.DBConnection; import java.sql.*;
protected void doPost(HttpServletRequest request, HttpServletResponse response)             throws ServletException, IOException {         String name = request.getParameter("name");
double price = Double.parseDouble(request.getParameter("price"));
String category = request.getParameter("category");
Part filePart = request.getPart("image");
String fileName = filePart.getSubmittedFileName();
String uploadPath = getServletContext().getRealPath("") + "images";         File uploadDir = new File(uploadPath);         if (!uploadDir.exists()) uploadDir.mkdir();
filePart.write(uploadPath + File.separator + fileName);
e.printStackTrace();
response.sendRedirect("manageProducts.jsp");
HttpSession session = request.getSession(false);         if (session == null || session.getAttribute("adminUser") == null) {             response.sendRedirect("adminLogin.jsp?error=Access denied! Please login as admin.");
return;
stmt.setInt(1, id);                 stmt.executeUpdate();
e.printStackTrace();
response.sendRedirect("manageProducts.jsp");
package com.ecommerce.servlet; import com.ecommerce.dao.ProductDAO; import com.ecommerce.model.Product; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.HttpSession; import java.io.IOException; import java.util.ArrayList; import java.util.List;
@WebServlet("/ShopServlet") public class ShopServlet extends HttpServlet {     private ProductDAO productDAO = new ProductDAO();
String category = request.getParameter("category");
// Get products by category (or all products if category is null)         List<Product> productList;         if (category != null && !category.isEmpty()) {             productList = productDAO.getProductsByCategory(category);
} else {             productList = productDAO.getAllProducts();
// Set product list in request and forward to shop.jsp         request.setAttribute("productList", productList);         request.getRequestDispatcher("shop.jsp").forward(request, response);
HttpSession session = request.getSession();
List<Product> cart = (List<Product>) session.getAttribute("cart");         if (cart == null) {             cart = new ArrayList<>();
int id = Integer.parseInt(request.getParameter("id"));         String name = request.getParameter("name");         double price = Double.parseDouble(request.getParameter("price"));
String category = request.getParameter("category");
String image = request.getParameter("image");
this.id = 0;         this.name = "";         this.price = 0.0;         this.category = "";         this.image = "";
this.id = id;         this.name = name;         this.price = Math.max(price, 0.0);  // Ensuring no negative price         this.category = category;         this.image = image;
// Constructor for adding a new product (without ID)     public Product(String name, double price, String category, String image) {         this.name = name;         this.price = Math.max(price, 0.0);         this.category = category;         this.image = image;
'}';
package com.ecommerce.dao;
List<Product> productList = new ArrayList<>();
String sql = "SELECT * FROM products";
try (Connection conn = DBConnection.getConnection();
Statement stmt = conn.createStatement();
productList.add(mapResultSetToProduct(rs));
System.err.println("Error fetching all products: " + e.getMessage());
return productList;
List<Product> productList = new ArrayList<>();
String sql = "SELECT * FROM products WHERE category = ?";         try (Connection conn = DBConnection.getConnection();              PreparedStatement stmt = conn.prepareStatement(sql)) {             stmt.setString(1, category);
productList.add(mapResultSetToProduct(rs));
System.err.println("Error fetching products by category '" + category + "': " + e.getMessage());
return productList;
String sql = "INSERT INTO products (name, price, category, image) VALUES (?, ?, ?, ?)";         try (Connection conn = DBConnection.getConnection();              PreparedStatement stmt = conn.prepareStatement(sql)) {             stmt.setString(1, product.getName());             stmt.setDouble(2, product.getPrice());             stmt.setString(3, product.getCategory());             stmt.setString(4, product.getImage());
int rowsInserted = stmt.executeUpdate();
System.err.println("Error adding product: " + e.getMessage());             return false;
String sql = "DELETE FROM products WHERE id = ?";         try (Connection conn = DBConnection.getConnection();              PreparedStatement stmt = conn.prepareStatement(sql)) {             stmt.setInt(1, productId);
int rowsDeleted = stmt.executeUpdate();
System.err.println("Error deleting product with ID " + productId + ": " + e.getMessage());             return false;
);
productDAO.addProduct(product);         response.sendRedirect("manageProducts.jsp");
HttpSession sessionWishlist = request.getSession();
List<Product> wishlist = (List<Product>) sessionWishlist.getAttribute("wishlist");
conn = DBConnection.getConnection();
e.printStackTrace();
List<Product> wishlist = new ArrayList<>();
= w.product_id";
));
e.printStackTrace();
}         return wishlist;
e.printStackTrace();
9.23 WishlistItem.java package com.ecommerce.model; public class WishlistItem {     private int id;     private String name;     private double price;
public WishlistItem(int id, String name, double price, String image) {         this.id = id;         this.name = name;         this.price = price;         this.image = image;
package com.ecommerce.servlet; import com.ecommerce.model.Product; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.HttpSession; import java.io.IOException; import java.util.ArrayList; import java.util.List;
HttpSession session = request.getSession();
wishlist = new ArrayList<>();
session.setAttribute("wishlist", wishlist);
String action = request.getParameter("action");
response.sendRedirect("wishlist.jsp?error=No%20action%20provided");             return;
int id = Integer.parseInt(request.getParameter("id"));                 String name = request.getParameter("name");
double price = Double.parseDouble(request.getParameter("price"));
String category = request.getParameter("category");                 String image = request.getParameter("image");
wishlist.add(new Product(id, name, price, category, image));                     session.setAttribute("wishlist", wishlist);
response.sendRedirect("wishlist.jsp?message=Product%20added%20successfully");
response.sendRedirect("wishlist.jsp?error=Invalid%20product%20data");
int id = Integer.parseInt(request.getParameter("id"));                 wishlist.removeIf(product -> product.getId() == id);                 session.setAttribute("wishlist", wishlist);
response.sendRedirect("wishlist.jsp?message=Product%20removed%20successfully");
response.sendRedirect("wishlist.jsp?error=Invalid%20product%20ID");
response.sendRedirect("wishlist.jsp?error=Invalid%20action");
protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {         response.sendRedirect("wishlist.jsp");
HttpSession sessionCart = request.getSession();
List<CartItem> cart = (List<CartItem>) sessionCart.getAttribute("cart");             double totalPrice = 0;
9.26 CartItem.java package com.ecommerce.model; public class CartItem {     private int id;     private String name;     private double price;     private int quantity;
public CartItem(int id, String name, double price, int quantity, String image) {         this.id = id;         this.name = name;         this.price = price;         this.quantity = quantity;         this.image = image;
}     // Getters     public int getId() {         return id;
public String getName() {         return name;
public double getPrice() {         return price;
public int getQuantity() {         return quantity;
// Setter for quantity (for updating quantity in cart)     public void setQuantity(int quantity) {         this.quantity = quantity;
String action = request.getParameter("action");
HttpSession session = request.getSession();
List<CartItem> cart = (List<CartItem>) session.getAttribute("cart");         if (cart == null) {             cart = new ArrayList<>();
int id = Integer.parseInt(request.getParameter("id"));             String name = request.getParameter("name");
double price = Double.parseDouble(request.getParameter("price"));
int quantity = Integer.parseInt(request.getParameter("quantity"));
String image = request.getParameter("image");
item.setQuantity(item.getQuantity() + quantity);                     exists = true;                     break;
cart.add(new CartItem(id, name, price, quantity, image));
session.setAttribute("cart", cart);             response.sendRedirect("cart.jsp");
String action = request.getParameter("action");
HttpSession session = request.getSession();
List<CartItem> cart = (List<CartItem>) session.getAttribute("cart");         if (cart == null) {             cart = new ArrayList<>();
if ("increase".equals(action) || "decrease".equals(action)) {             int id = Integer.parseInt(request.getParameter("id"));
for (CartItem item : cart) {                 if (item.getId() == id) {                     if ("increase".equals(action)) {                         item.setQuantity(item.getQuantity() + 1);
} else if ("decrease".equals(action) && item.getQuantity() > 1) {                         item.setQuantity(item.getQuantity() - 1);
}                     break;
session.setAttribute("cart", cart);
9.28 Category.java package com.ecommerce.model; public class Category {     private int id;     private String name;
public Category(int id, String name) {         this.id = id;         this.name = name;
public int getId() {         return id;
public void setId(int id) {         this.id = id;
public String getName() {         return name;
public void setName(String name) {         this.name = name;
9.29 CategoryDAO.java package com.ecommerce.dao; import com.ecommerce.model.Category; import java.sql.*; import java.util.ArrayList; import java.util.List; public class CategoryDAO {     private Connection conn;
public CategoryDAO(Connection conn) {         this.conn = conn;
e.printStackTrace();             return false;
String sql = "SELECT * FROM categories";
categories.add(new Category(rs.getInt("id"), rs.getString("name")));
e.printStackTrace();
return categories;
String name = request.getParameter("name");
Connection conn = com.ecommerce.dao.DBConnection.getConnection(); CategoryDAO categoryDAO = new CategoryDAO(conn); boolean success = categoryDAO.addCategory(name); if (success) { response.sendRedirect("manage-products.jsp?message=Category%20added%20successfully");
9.32 CheckoutServlet.java package com.ecommerce.servlet; import java.io.IOException; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.HttpSession;
HttpSession session = request.getSession();         session.removeAttribute("cart"); // Clear the cart after checkout         response.sendRedirect("checkoutSuccess.jsp");
@charset "UTF-8";
* {     margin: 0;     padding: 0;     box-sizing: border-box;     font-family: 'Poppins', sans-serif;
} body {     background: linear-gradient(to right, #6a11cb, #2575fc);     color: #333;
.navbar {     background: rgba(0, 123, 255, 0.9);     padding: 15px;     display: flex;     justify-content: space-between;     align-items: center;     color: white;     box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);
.navbar a {     color: white;     text-decoration: none;     font-size: 18px;     margin: 0 15px;     padding: 10px 15px;     border-radius: 5px;     transition: 0.3s ease;
.navbar a:hover {     background: rgba(255, 255, 255, 0.2);
} .logout-btn {     background: #dc3545;     padding: 10px 15px;     border-radius: 5px;
.logout-btn:hover {     background: #c82333;
.container {     max-width: 1200px;     margin: 30px auto;     padding: 20px;     background: white;     border-radius: 10px;     box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);     animation: fadeIn 1s ease-in-out;
.header {     text-align: center;     background: linear-gradient(to right, #ff7e5f, #feb47b);     color: white;     padding: 25px;
border-radius: 8px;     font-size: 24px;     font-weight: bold;     text-transform: uppercase;     letter-spacing: 2px;
.product-grid {     display: grid;     grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));     gap: 20px;     margin-top: 20px;
.product-card {     background: white;     border-radius: 10px;     overflow: hidden;     box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.2);     transition: transform 0.3s ease;     text-align: center;     padding: 15px;
.product-card:hover {     transform: scale(1.05);
.product-card img {     width: 100%;     height: 200px;     object-fit: cover;     border-bottom: 2px solid #007bff;
.product-card h5 {     font-size: 20px;     margin: 10px 0;     color: #333; } .product-card p {     font-size: 18px;     font-weight: bold;     color: #007bff; } .product-card button {     background: #28a745;     color: white;     border: none;     padding: 10px 15px;     margin-top: 10px;     border-radius: 5px;     cursor: pointer;     transition: 0.3s ease;
.product-card button:hover {     background: #218838;
.cart-btn, .wishlist-btn {     display: block;     width: 100%;     padding: 10px;     margin-top: 10px;     border-radius: 5px;     border: none;     color: white;     cursor: pointer;     font-size: 16px;     transition: 0.3s ease;
.cart-btn {     background: #28a745;
.wishlist-btn {     background: #ff4757;
.cart-btn:hover {     background: #218838;
footer {     text-align: center;     padding: 15px;     background: #343a40;     color: white;     margin-top: 30px;     font-size: 18px;
from {         opacity: 0;         transform: translateY(-20px);
}     to {         opacity: 1;         transform: translateY(0);